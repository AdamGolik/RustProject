//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "client"
    }
}

#[derive(Serialize, Deserialize)]
pub struct Controller {
    pub name: String,
    pub lastname: String,
    pub telephone: String,
    pub title: String,
    pub description: String,
    pub time_from: DateTime,
    pub time_to: DateTime,
    pub datetime: DateTime,
    pub added_description: Option<Json>,
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub uuid: Uuid,
    pub name: String,
    pub lastname: String,
    pub telephone: String,
    pub title: String,
    pub description: String,
    pub time_from: DateTime,
    pub time_to: DateTime,
    pub datetime: DateTime,
    pub added_description: Json,
    pub user_uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Uuid,
    Name,
    Lastname,
    Telephone,
    Title,
    Description,
    TimeFrom,
    TimeTo,
    Datetime,
    AddedDescription,
    UserUuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Uuid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Uuid => ColumnType::Uuid.def(),
            Self::Name => ColumnType::String(StringLen::None).def(),
            Self::Lastname => ColumnType::String(StringLen::None).def(),
            Self::Telephone => ColumnType::String(StringLen::None).def(),
            Self::Title => ColumnType::String(StringLen::None).def(),
            Self::Description => ColumnType::Text.def(),
            Self::TimeFrom => ColumnType::DateTime.def(),
            Self::TimeTo => ColumnType::DateTime.def(),
            Self::Datetime => ColumnType::DateTime.def(),
            Self::AddedDescription => ColumnType::Json.def(),
            Self::UserUuid => ColumnType::Uuid.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserUuid)
                .to(super::user::Column::Uuid)
                .into(),
        }
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}




